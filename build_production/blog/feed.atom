<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>David Hallin</title>
    <link href="https://davidhallin.com/" />
    <link type="application/atom+xml" rel="self" href="https://davidhallin.com/blog/feed.atom" />
    <updated>2020-12-02T15:36:11+00:00</updated>
    <id>https://davidhallin.com/blog/feed.atom</id>
    <author>
        <name>David Hallin</name>
    </author>
                <entry>
    <id>https://davidhallin.com/blog/weather-zsh-function</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/weather-zsh-function" />
    <title>the weather zsh terminal function</title>
    <published>2020-12-02T00:00:00+00:00</published>
    <updated>2020-12-02T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">While I was kind of digging through my configuration files to make the post what i use, I went down a bit of a rabbit hole for my zsh configuration.

I had a bunch of aliases, functions, and plugins in my configuration that I didn&#039;t use anymore, and......</summary>
    <content type="html"><![CDATA[
        <p>While I was kind of digging through my configuration files to make the post <a href="/blog/what-i-use-2020">what i use</a>, I went down a bit of a rabbit hole for my zsh configuration.</p>

<p>I had a bunch of aliases, functions, and plugins in my configuration that I didn't use anymore, and didn't need really, so I started to go through them and began looking into which ones were still useful vs which ones I could remove from my .zshrc file.</p>

<p>During that process I stumbled upon the <a href="https://github.com/freekmurze/dotfiles">freekmurze/dotfiles</a> repo, and I found this function that freek is sourcing in his .zshrc</p>

<pre><code class="language-shell">function weather() {
   city="$1"

   if [ -z "$city" ]; then
      city="Antwerp"
   fi

   eval "curl http://wttr.in/${city}"
}
</code></pre>

<p>So this function if you open up your terminal, you simply type <code>weather</code> and the weather report comes up beautifully.</p>

<p>I adjusted it slightly so it runs for Peterborough instead of Antwerp, but here is the output.</p>

<p><img src="/assets/images/post-15/weather.png" class="mx-auto" width="80%"/></p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/what-i-use-2020</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/what-i-use-2020" />
    <title>what i use</title>
    <published>2020-12-02T00:00:00+00:00</published>
    <updated>2020-12-02T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">This page is inspired by some other developer&#039;s &quot;my setup&quot; pages.



So I largely do 2 types of programming, PHP and Go.

For most of my PHP work I use PhpStorm and for most of my Go work I use GoLand.

These are both made by JetBrains so they have an......</summary>
    <content type="html"><![CDATA[
        <p>This page is inspired by some other developer's "my setup" pages.</p>

<h2>IDEs</h2>

<p>So I largely do 2 types of programming, PHP and Go.</p>

<p>For most of my PHP work I use <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a> and for most of my Go work I use <a href="https://www.jetbrains.com/go/">GoLand</a>.</p>

<p>These are both made by JetBrains so they have an annual subscription associated with them, but the code completion and package imports make these things pretty awesome.</p>

<p>I use a pretty generic dark theme, and the FiraCode font for both of them.  The only real customization I've done is moving the project panel to the right-hand side which I saw in <a href="https://calebporzio.com/my-vs-code-setup-2">Caleb Porzio's VS Code Setup</a>, and I think it fit's my needs better.</p>

<p>I also keep a few other IDEs/editors on my system.</p>

<p><a href="https://www.sublimetext.com/3">Sublime Text 3</a> - The IDE I was using before - I still find the multiple selection tools really comfortable in Sublime Text, so when I'm trying to do mass edits, to a CSV or something like that, I'll usually pop open Sublime.</p>

<p><a href="https://code.visualstudio.com/">VS Code</a> - I usually use this for my static website projects (using vue or alpine and html)</p>

<h2>Computers</h2>

<p>I have 2 computers that I use for my dev work.</p>

<p>My primary computer is a 2017 15" MacBook Pro</p>

<p><img src="/assets/images/what-i-use/about-mac.jpg" style="height:280px" class="mx-auto"/></p>

<p>My secondary computer is an <a href="https://store.hp.com/CanadaStore/Merch/Offer.aspx?p=hp-spectre-x360-convertible-laptop&lang=EN-CA">HP Spectre x360</a> ( 15.6" 4K/i7/16GB/512SSD )</p>

<p>The reason I need to use two separate machines is because I prefer Mac, and it works for most of my development work, but occasionally I need to build and compile for windows, so I have my HP for that.</p>

<p>The HP also has a great flip over touch screen with a stylus, so it works pretty great for taking notes or doing conferences.</p>

<h2>Other useful dev apps</h2>

<ul>
<li><a href="https://filezilla-project.org/">Filezilla</a> - FTP client</li>
<li><a href="https://tableplus.com/">TablePlus</a> - my database client</li>
<li><a href="https://numi.app/">Numi</a> - quick math and note taking</li>
<li><a href="https://tinkerwell.app/">Tinkerwell</a> -a must have for Laravel Developers</li>
<li><a href="https://www.lastpass.com/">LastPass</a> - Password management</li>
<li><a href="https://brave.com/">Brave</a> - My primary browser</li>
<li><a href="https://miro.com/">Miro</a> - Fantastic for Planning/Mocking up/documenting ideas</li>
<li><a href="https://clubhouse.io/">Clubhouse</a> - a absolutely fantastic project management tool (with a generous free tier)</li>
<li><a href="https://laravel.com/docs/8.x/valet">Laravel Valet</a> - for all my laravel apps</li>
<li><a href="https://apps.apple.com/us/app/lexi-json-browser/id1462580127?mt=12">Lexi - JSON Browser</a> - when I'm working with a json string this becomes super useful to explore JSON data</li>
<li><a href="https://apps.apple.com/ca/app/faviconer/id923463607?mt=12">Faviconer</a> - little tool that makes .ICO files for web apps</li>
<li><a href="https://monosnap.com/">Monosnap</a> - great for making screen recorded videos easily</li>
</ul>

<h2>My Setup</h2>

<ul>
<li>Mic - <a href="https://www.audio-technica.com/en-ca/at2020">Audio-Technica AT2020</a></li>
<li>Mixer/Audio Interface - <a href="https://www.behringer.com/product.html?modelCode=P0ADV">Behringer 302USB</a></li>
<li>Camera - <a href="https://gopro.com/en/us/shop/hero7-black/tech-specs?pid=CHDHX-701-master">GoPro Hero 7 Black</a></li>
<li>Capture Card - <a href="https://www.elgato.com/en/gaming/cam-link-4k">Elgato Cam Link 4k</a></li>
<li>Lighting - the tops are <a href="https://neewer.com/collections/led-panel-lights/products/nl660-led-panel-lights-90089829">Neewer Dimmable bi-color 660 LED lights</a></li>
<li>Lighting Base - Custom built using an old desk leg &amp; a broom stick handle.</li>
<li>Laptop Base - Custom built using scrap wood &amp; a 5/8" dowel rod</li>
<li>Monitor - <a href="https://www.lg.com/us/monitors/lg-43UD79-B-4k-uhd-led-monitor">LG 43" 4K LED Monitor</a></li>
<li>Keyboard 1 - for when I want to be quiet - <a href="https://www.logitech.com/en-ca/products/keyboards/mx-keys-wireless-keyboard.920-009294.html">Logitech MX Keys</a></li>
<li>Keyboard 2 - for when I don't care about how clicky it is - <a href="https://www.daskeyboard.com/daskeyboard-4-professional/">dasKeyboard 4 Pro (Mac)</a></li>
<li>Primary Mouse - <a href="https://www.logitech.com/en-roeu/product/mx-master-2s-flow">Logitech MX Master 2S</a></li>
<li>On the Go Mouse - <a href="https://www.logitech.com/en-ca/products/mice/mx-anywhere-2s-flow.910-005132.html">Logitech MX Anywhere 2S</a></li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/introduction-to-youtube-channel</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/introduction-to-youtube-channel" />
    <title>Introduction to Youtube Channel</title>
    <published>2020-10-14T00:00:00+00:00</published>
    <updated>2020-10-14T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Hi all,

So I&#039;m going to start a youtube channel just showing how I work, and what I do.  Hopefully people like it.

Here is the channel introduction, and I&#039;ll work on adding more and more content to it over time....</summary>
    <content type="html"><![CDATA[
        <p>Hi all,</p>

<p>So I'm going to start a youtube channel just showing how I work, and what I do.  Hopefully people like it.</p>

<p>Here is the channel introduction, and I'll work on adding more and more content to it over time.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/Ut8oWOLcAYw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/update-to-manny</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/update-to-manny" />
    <title>New Update to Open Source Repository - Manny</title>
    <published>2020-09-24T00:00:00+00:00</published>
    <updated>2020-09-24T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">If you haven&#039;t heard of Manny, it&#039;s an open source package I created in March of 2020.

Repo: github.com/hallindavid/manny
Blog post explaining what it is: Livewire Masks With Manny
Project page: Manny

I made a PR with 2 changes that popped up in a......</summary>
    <content type="html"><![CDATA[
        <p>If you haven't heard of Manny, it's an open source package I created in March of 2020.</p>

<p>Repo: <a href="https://github.com/hallindavid/manny">github.com/hallindavid/manny</a><br />
Blog post explaining what it is: <a href="/blog/livewire-masks-with-manny">Livewire Masks With Manny</a><br />
Project page: <a href="/projects/manny">Manny</a></p>

<p>I made a PR with 2 changes that popped up in a project I was working on.</p>

<h4>Updated Mask to not add on additional characters after we've run out of characters.</h4>

<p>The mask function is typically used like this</p>

<pre><code class="language-php">$postal_code = Manny::mask($user_input, 'A1A 1A1');
</code></pre>

<p>This first removes all non-alphanumeric characters from the <code>$user_input</code> variable, and then adds them to the pattern string - in this case <code>A1A 1A1</code>.</p>

<pre><code class="language-php">Manny::mask('#####M !@#!@# 4 A', 'A1A 1A1);
//returns "M4A "
</code></pre>

<p>This is find behavior for user inputs when the string is expected to be finished - like in the postal code example above, but when using a mask for an optionally filled mask, like a phone number with extension like this</p>

<pre><code class="language-php">Manny::mask('123-123-1234', '111-111-1111 ext. 111111111');
// returns "123-123-1234 ext. "
</code></pre>

<p>If the user inputs a phone number without an extension, I wanted it to not append the trailing mask pattern - so the update changes that to return this</p>

<pre><code class="language-php">Manny::mask('1231231234', '111-111-1111 ext. 111111111');
// returns "123-123-1234"
</code></pre>

<p>and then the moment the user enters one more key,</p>

<pre><code class="language-php">Manny::mask('12312312345', '111-111-1111 ext. 111111111');
// returns "123-123-1234 ext. 5"
</code></pre>

<h5>Added the colon(:) character as an option for the stripper function</h5>

<p>This one came up because of a project I'm working on where we want to allow for special searching via tags, like many apps do these days.</p>

<p>For my use case, when you're using the search box, it starts as an indexed search for invoices - it will grab all records where the search text is included in any of the text fields.</p>

<p>But when a user wants to search for a specific invoice using an invoice number - if that invoice number is 950 - then we actually see numerous results appear, one of them is invoice 950, but others have phone numbers with 950 in them, or 950 is mentioned somewhere in the fields.</p>

<p>So the solution is to check the search string for specific tags, in our case it's <code>inv:xxx</code></p>

<pre><code class="language-php">$search_string = "inv:950 I shouldn't use a search string that hasn't been cleansed";
$cleansed_search_string = Manny::stripper($search_string, ['alpha','num','space', 'colon']);
// will be "inv:950 i shouldnt use a search string that hasnt been cleansed"
</code></pre>

<p>Now that I have cleansed the string, I can iterate over the search body and generate results something like this</p>

<pre><code class="language-php">$invoice_search = null;
$search_parts = explode(' ', $cleansed_search_string);
$remaining_search_parts = [];

foreach($search_parts as $search_part) {
    if (substr($search_part, 0, 4) == 'inv:') {
        $invoice_search = substr($search_part, 4);
    } else {
        $remaining_search_parts[] = $search_part;
    }
}

$remaining_search = implode(' ', $remaining_search_parts);

$invoices = Invoices::when($invoice_search !== null, function(Builder $query) use ($invoice_search) {
    $query-&gt;where('invoice_number', $invoice_search);
})-&gt;when((strlen($remaining_search) &gt; 0), function(Builder $query) use ($remaining_search) {
    $query-&gt;where('invoice_body', 'LIKE', '%' . $remaining_search . '%');
}-&gt;get();
</code></pre>

<p>So - those are the updates to Manny!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/easy-tailwind-buttons</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/easy-tailwind-buttons" />
    <title>Easy Tailwindcss Buttons</title>
    <published>2020-08-10T00:00:00+00:00</published>
    <updated>2020-08-10T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">If you&#039;ve not heard of TailwindCSS, you&#039;re missing out.

It&#039;s a utility framework - super light weight, easy to learn, and absolutely awesome.

I&#039;ve been using Tailwind for all my recent projects, and most of my projects are data-driven web applications,......</summary>
    <content type="html"><![CDATA[
        <p>If you've not heard of <a href="https://tailwindcss.com/">TailwindCSS</a>, you're missing out.</p>

<p>It's a utility framework - super light weight, easy to learn, and absolutely awesome.</p>

<p>I've been using Tailwind for all my recent projects, and most of my projects are data-driven web applications, with buttons as such.</p>

<p>Now if you've worked with Bootstrap, you're probably used to creating buttons like this</p>

<pre><code class="language-html">&lt;button class="btn btn-primary"&gt;Primary&lt;/button&gt;
</code></pre>

<p>and out would pop a button like this:</p>

<p><img src="/assets/images/post-11/bootstrap-primary-button.png" /></p>

<p>This is pretty straight-forward, and I liked being able to remember that if I needed a button, I just had to remember a couple of quick classes to make it how ever I want.</p>

<p>TailwindCSS, out of the box, doesn't do this for you - but it's super easy to do it for yourself.</p>

<p>For my Laravel Projects, when I use the TALL stack preset (TailwindCSS, AlpineJS, Laravel, Livewire), it creates your Sass file like this:</p>

<pre><code class="language-scss"><br />/**
 * This injects Tailwind's base styles, which is a combination of
 * Normalize.css and some additional base styles.
 */
@tailwind base;

/**
 * Remove the default box-shadow for invalid elements to prevent
 * inputs in Livewire components showing with a
 * red border by default in Firefox.
 */
input:invalid, textarea:invalid, select:invalid {
    box-shadow: none;
}
/**
 * This injects any component classes registered by plugins.
 */
@tailwind components;
/**
 *  CUSTOM CLASSES/COMPONENTS HERE
 */


/**
 * This injects all of Tailwind's utility classes, generated based on your
 * config file.
 */
@tailwind utilities;

[x-cloak] {
    display: none;
}
</code></pre>

<p>Then after you compile with npm, then it pushes all this into your application.</p>

<p>So - to do something that makes Tailwind buttons as easy as Bootstrap Buttons, I throw in these custom components</p>

<pre><code class="language-scss">.btn {
    @apply inline-flex items-center border font-medium transition ease-in-out duration-150 justify-center;
}

.btn:focus {
    @apply outline-none;
}

.btn-xs {
    @apply px-2.5 py-1.5 text-xs leading-4 rounded;
}

.btn-sm {
    @apply px-3 py-2 text-sm leading-4 rounded-md;
}

.btn-base {
    @apply px-4 py-2 text-sm leading-5 rounded-md;
}

.btn-lg {
    @apply px-4 py-2 text-base leading-6 rounded-md;
}

.btn-xl {
    @apply px-6 py-3 text-base leading-6 rounded-md;
}

.btn-white {
    @apply border-gray-300 bg-white text-gray-700;
}

.btn-white:focus {
    @apply border-blue-300 shadow-outline-blue;
}

.btn-white:hover {
    @apply text-gray-500;
}

.btn-white:active {
    @apply text-gray-800 bg-gray-50;
}

.btn-primary {
    @apply border-transparent bg-indigo-600 text-white;
}

.btn-primary:focus {
    @apply border-indigo-700 shadow-outline-indigo;
}

.btn-primary:hover {
    @apply bg-indigo-500;
}

.btn-primary:active {
    @apply bg-indigo-700;
}

.btn-danger {
    @apply border-transparent bg-red-600 text-white;
}

.btn-danger:focus {
    @apply border-red-700 shadow-outline-red;
}

.btn-danger:hover {
    @apply bg-red-500;
}

.btn-danger:active {
    @apply bg-red-700;
}

.btn-secondary {
    @apply border-transparent text-indigo-700 bg-indigo-100;
}

.btn-secondary:focus {
    @apply border-indigo-300 shadow-outline-indigo;
}

.btn-secondary:hover {
    @apply bg-indigo-50;
}

.btn-secondary:active {
    @apply bg-indigo-200;
}
</code></pre>

<p>Then you can make super easy, and great looking buttons that look like this:</p>

<p><img src="/assets/images/post-11/buttons.png" width="80%"></p>

<p>And it's easy to add in what ever other colors or sizes you want eg:</p>

<pre><code class="language-scss"><br />/* For a new color use this */
.btn-blue {
    @apply border-transparent bg-blue-600 text-white;
}

.btn-blue:focus {
    @apply border-blue-700 shadow-outline-blue;
}

.btn-blue:hover {
    @apply bg-blue-500;
}

.btn-blue:active {
    @apply bg-blue-700;
}

/* For a new size use this */
.btn-really-big {
    @apply px-10 py-8 text-lg leading-7 rounded-md;
}


</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/confirming-actions-with-laravel-livewire</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/confirming-actions-with-laravel-livewire" />
    <title>Javascript confirm before calling wire:click in Laravel Livewire</title>
    <published>2020-08-08T00:00:00+00:00</published>
    <updated>2020-08-08T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">First off - I should say - this is taken from this issue conversation on github - particularly from fra000&#039;s comment on November 14th, 2019

When building any sort of database-driven app, I&#039;ll want to have a Javascript Confirmation before actually......</summary>
    <content type="html"><![CDATA[
        <p>First off - I should say - this is taken from <a href="https://github.com/livewire/livewire/issues/366">this issue conversation on github</a> - particularly from <a href="https://github.com/fra000">fra000</a>'s comment on November 14th, 2019</p>

<p>When building any sort of database-driven app, I'll want to have a Javascript Confirmation before actually performing an action for things like deleting something, or modifying something which performs a significant change.</p>

<p>With Livewire, you call the PHP function easily with something like this</p>

<pre><code class="language-html">&lt;button wire:click="delete_object"&gt;DELETE!&lt;/button&gt;
</code></pre>

<p>But that will call the delete code right away, so rather than doing that, we want to have something that prompts the user to say "Are you sure?" or something along those lines.</p>

<p><img src="/assets/images/post-10/alert-preview.png" /></p>

<p>And here is how -</p>

<pre><code class="language-html">&lt;button onclick="confirm('Are you sure?') || event.stopImmediatePropagation()" 
        wire:click="delete_object"&gt;DELETE!&lt;/button&gt;
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/laravel-handling-null-in-order-by-query</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/laravel-handling-null-in-order-by-query" />
    <title>Handling null values in an &#039;order by&#039; query with Laravel Eloquent (Laravel Beginner, mysql + postgres compatible)</title>
    <published>2020-06-02T00:00:00+00:00</published>
    <updated>2020-06-02T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">In Laravel, there is a precedent to use a nullable datetime/timestamp field similar to a boolean value, for example things like the field &lt;code&gt;deleted_at&lt;/code&gt; which is automatically added to your eloquent models when you use soft_deletes.

When you&#039;re......</summary>
    <content type="html"><![CDATA[
        <p>In Laravel, there is a precedent to use a nullable datetime/timestamp field similar to a boolean value, for example things like the field <code>deleted_at</code> which is automatically added to your eloquent models when you use soft_deletes.</p>

<p>When you're working with that within that frame, sometimes you're going to want handle these date times in different ways.</p>

<p>Say for instance, the field <code>email_verified_at</code> in the <code>User</code> model which is pretty default/standard in a Laravel installation.</p>

<pre><code class="language-php">    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table-&gt;id();
            $table-&gt;string('name');
            $table-&gt;string('email')-&gt;unique();
            $table-&gt;timestamp('email_verified_at')-&gt;nullable();
            $table-&gt;string('password');            
            $table-&gt;rememberToken();
            $table-&gt;timestamps();
        });
    }
</code></pre>

<p>Then you have an administration page or report which needs to show all the users, and include their status.  You would probably do something like this:</p>

<pre><code class="language-php">    return App\User::orderBy('email_verified_at','ASC')-&gt;get()-&gt;toArray();
</code></pre>

<p>Here is a subset of the sample results from this query from a super-basic factory user loaded laravel project.</p>

<pre><code class="language-php">    [  "id" =&gt; 38,
       "name" =&gt; "Laila Jacobi",
       "email" =&gt; "spinka.florence@example.com",
       "email_verified_at" =&gt; null,
       "created_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "updated_at" =&gt; "2020-06-02T12:40:32.000000Z",
     ],
     [ "id" =&gt; 45,
       "name" =&gt; "Carmelo Bernhard",
       "email" =&gt; "gwolf@example.org",
       "email_verified_at" =&gt; null,
       "created_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "updated_at" =&gt; "2020-06-02T12:40:32.000000Z",
     ],
     [ "id" =&gt; 2,
       "name" =&gt; "Dr. Anais Graham",
       "email" =&gt; "adrian.feest@example.net",
       "email_verified_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "created_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "updated_at" =&gt; "2020-06-02T12:40:32.000000Z",
     ],
     [ "id" =&gt; 3,
       "name" =&gt; "Norris Kuhic",
       "email" =&gt; "iswaniawski@example.net",
       "email_verified_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "created_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "updated_at" =&gt; "2020-06-02T12:40:32.000000Z",
     ],
     [ "id" =&gt; 4,
       "name" =&gt; "Curt Anderson DVM",
       "email" =&gt; "uschmeler@example.net",
       "email_verified_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "created_at" =&gt; "2020-06-02T12:40:32.000000Z",
       "updated_at" =&gt; "2020-06-02T12:40:32.000000Z",
     ]
</code></pre>

<p>You can see the people who haven't verified their email come first in this query.
Say you want them at the end though - active users first is a common thing that people want to see, so logically:</p>

<pre><code class="language-php">return App\User::orderBy('email_verified_at','DESC')-&gt;get()-&gt;toArray();
</code></pre>

<p>This works - now the results have all the <code>"email_verified_at" =&gt; null,</code> at the very end, but now the order has your most recently verified users at the top.</p>

<p>So if we wanted a list of our users who have been verified the longest to shortest, where the unverified users would obviously be at the end, we'd have to do this a bit differently.  This also get's complicated when you are trying to stay database agnostic for MySQL and Postgres.</p>

<h2>Solution</h2>

<pre><code class="language-php">    // email_verified_at oldest to newest, with nulls last
    App\User::orderByRaw("CASE WHEN email_verified_at IS NULL THEN 0 ELSE 1 END DESC")-&gt;orderBy('email_verified_at','DESC')-&gt;get()-&gt;toArray();

    // email_verified_at newest to oldest, with nulls last
    App\User::orderByRaw("CASE WHEN email_verified_at IS NULL THEN 0 ELSE 1 END DESC")-&gt;orderBy('email_verified_at', 'ASC')-&gt;get()-&gt;toArray();

    // email_verified_at newest to oldest, with nulls first
    App\User::orderByRaw("CASE WHEN email_verified_at IS NULL THEN 0 ELSE 1 END ASC")-&gt;orderBy('email_verified_at', 'DESC')-&gt;get()-&gt;toArray();

    // email_verified_at newest to oldest, with nulls first
    App\User::orderByRaw("CASE WHEN email_verified_at IS NULL THEN 0 ELSE 1 END ASC")-&gt;orderBy('email_verified_at', 'ASC')-&gt;get()-&gt;toArray();
</code></pre>

<p>By keeping the null handling in a separate orderBy statement, it allows you to order the nulls which ever way you like, and continue sorting or using query builder to build out your query.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/testing-existance-of-laravel-models</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/testing-existance-of-laravel-models" />
    <title>Testing the Existance of Laravel Models</title>
    <published>2020-04-02T00:00:00+00:00</published>
    <updated>2020-04-02T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">This is something I had to google so many times when I got started with Laravel, so I hope others find it helpful.

In Codeigniter, there isn&#039;t really any ORM, so if you&#039;re looking to check if something exists in your database, you&#039;d check out the number......</summary>
    <content type="html"><![CDATA[
        <p>This is something I had to google so many times when I got started with Laravel, so I hope others find it helpful.</p>

<p>In Codeigniter, there isn't really any ORM, so if you're looking to check if something exists in your database, you'd check out the number of rows returned eg.</p>

<pre><code class="language-php">$postExists = ( $this-&gt;db-&gt;query("  Select COUNT(*) as CNT 
                                    from posts 
                                    where user_id = ?",  array(10))-&gt;row()-&gt;CNT &gt; 0);
if ($postExists) {
    //proceed with code
}
</code></pre>

<p>Or with query codeigniter query builder</p>

<pre><code class="language-php">$this-&gt;db-&gt;where('user_id', 10);
if ($this-&gt;db-&gt;count_all_results('posts') &gt; 0) {
    //post exists, proceed
}
</code></pre>

<h2>The Laravel Model Exists Check</h2>

<p>Now when I went from Codeigniter to Laravel this was a total change of mindset for me.  The manipulators that Laravel offers for this are huge.</p>

<p>To do the same thing as above, the easiest way to use Eloquent (without already having the user model as a variable) is to do something like this</p>

<pre><code class="language-php">use App\Post;
...
if (Post::where('user_id',10)-&gt;exists()) {
    //post exists, proceed
}
</code></pre>

<p>But when you start to look at the use cases for testing existance, there are a huge variety that are super helpful.</p>

<h2>Throw Error when the model doesn't exist</h2>

<pre><code class="language-php">use App\Post;
...
$post = Post::where('user_id',10)-&gt;firstOrFail();
</code></pre>

<p>then you may want to handle the error in a custom way - like redirecting the user, or Logging the error</p>

<pre><code class="language-php">use App\Post;
use Illuminate\Database\Eloquent\ModelNotFoundException;
...
try {
$post = Post::where('user_id', 10)-&gt;firstorFail();
} catch(ModelNotFoundException $e) {
    //Log the error, redirect the user etc.
}
</code></pre>

<h2>Create the model if it doesn't exist</h2>

<p>Sometimes you want to basically create an empty/default model if none exists.</p>

<pre><code class="language-php">use App\Post;
...
$post = Post::firstOrCreate(['user_id'=&gt;10]);
</code></pre>

<p>This way requires that the user_id is a fillable field in the posts model, if you're using the eloquent relationship and don't want to make user_id a fillable field, you would do something like this.</p>

<pre><code class="language-php">use App\Post;
...
$post = User::find(10)-&gt;posts()-&gt;firstOrCreate([]);
</code></pre>

<h2>Alternative existance checks that work</h2>

<pre><code class="language-php">use App\Post;
...

if (Post::where('user_id',10)-&gt;count() &gt; 0) {
    //Post exists
}

if (Post::where('user_id', 10)-&gt;first() !== NULL) {
    //Post exists
}
</code></pre>

<p>That's all - Hopefully it helps someone!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/its-important-to-be-part-of-a-dev-community</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/its-important-to-be-part-of-a-dev-community" />
    <title>The importance of being a part of a dev community</title>
    <published>2020-03-30T00:00:00+00:00</published>
    <updated>2020-03-30T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">** Note - this is a non-technical post.  If you&#039;re here for the techno-goodies, this is safe to skip. **

I don&#039;t mean &quot;part of a dev community&quot; in a weird cliquey way - when I say being part of a dev community I mean being in a position where you&#039;re......</summary>
    <content type="html"><![CDATA[
        <p>** Note - this is a non-technical post.  If you're here for the techno-goodies, this is safe to skip. **</p>

<p>I don't mean "part of a dev community" in a weird cliquey way - when I say being part of a dev community I mean being in a position where you're constantly seeing different people's ideas/thoughts/processes as a method of learning.</p>

<p>About a year ago, I started taking a hard look at my web development work flow.  It had become extremely repetitive and boring.  Some of the libraries I was using were so old that I wasn't able to update to 5.6... which for reference came out in 2014...</p>

<p>In ~2013 I started working with Codeigniter and I loved it.  It was so tiny compared to the other frameworks out there like CakePHP, or Laravel, and was easy enough to pick up and go that I didn't really ever take the time and look back.  This decision took it's toll over time though.</p>

<p><img src="/assets/images/first-open-source-package/framework-compare.png" /></p>

<p>Codeigniter is <strong>small</strong> - This was beneficial for us because of 2 things.</p>

<ol>
<li>It had a super small footprint. This was good for my team because our architecture was many small deployments.</li>
<li>It didn't have as many framework-specific abstractions / interfaces we'd need to learn to get moving quickly.</li>
</ol>

<p>This got messy after a few years.  Codeigniter has great documentation for it's core features, but it doesn't (in my experience) have a large community of people who are working with it.  When I ran into a problem and couldn't figure it out, I'd frequently end up on Stack overflow looking at how people solved it in Laravel or CakePHP or some other system, and then figuring out how to move the solution to Codeigniter.</p>

<p>A little over a year ago, the team started a new project.  I like scrum - so we whipped up an MVP with Codeigniter and took a look at how it was going.  It wasn't scalable, and it showed strain really early.  This particular project desperately needed queue/workers to operate, and using PHP 5.6 (a limitation of some of our custom libs) for brand-new projects was getting stupidly-silly. We needed to do something else quickly, and we had a lot of baggage.</p>

<p>Someone approached me late in 2018 to help fix a few issues on an aging laravel project and I took a look at it, and literally couldn't find the project.  I ended up having to go through a few beginner tutorials to understand the project folder structure, but in that short time - I had to do some googling, and was blown away by how many responses there were for even the most basic of questions.</p>

<p>There were free tutorials everywhere, people going open-source as a full-time career, and very active, obvious leaders in the huge community.</p>

<p>This past year has been the single most learning-intensive experience of my entire life - and I'm hooked - I can't soak it in fast enough to the point where there are nights I can't shut my brain off because of how excited I am about what I'm working on the next day.</p>

<p>I'm quite sure that very few if any people in community recognize my name, but I attribute the level of engagement I feel right now to that community - because when you can see how much stuff is actually going on, then it's really easy to pull up your socks and get in the game.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/livewire-masks-with-manny</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/livewire-masks-with-manny" />
    <title>Masking Livewire inputs with manny</title>
    <published>2020-03-30T00:00:00+00:00</published>
    <updated>2020-03-30T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">This post expects you to be comfy with Laravel development, and a bit of Livewire as well - although I do go through setting up livewire.



So let&#039;s start off by creating our project and stepping into it.





Let&#039;s pull in Livewire and also pull in the......</summary>
    <content type="html"><![CDATA[
        <p>This post expects you to be comfy with Laravel development, and a bit of Livewire as well - although I do go through setting up livewire.</p>

<h3>Creating the Project</h3>

<p>So let's start off by creating our project and stepping into it.</p>

<pre><code class="language-sh">laravel new livewiremask
cd livewiremask
</code></pre>

<h3>Pull in scaffolding and livewire</h3>

<p>Let's pull in Livewire and also pull in the ui front-end scaffolding - just so we don't have to build much in terms of a theme.</p>

<pre><code class="language-sh">composer require livewire/livewire
composer require laravel/ui 
php artisan ui bootstrap --auth
npm install &amp;&amp; npm run dev
</code></pre>

<p>Although we really don't need the the auth - I just want to steal the register form for this example.</p>

<p>At this point, you'll need to set up the dev environment for however you use Laravel normally.  For me, it's valet.</p>

<pre><code>valet link
</code></pre>

<p>open your browser window and check out what we've done so far.  You should be greeted with the laravel default landing page
<img src="/assets/images/livewire-masks-with-manny/livewire-mask-start.png" class="mx-auto w-50"/></p>

<h3>Setup Livewire Component</h3>

<p>So the first thing we need to do is add the livewire assets into the layout.</p>

<p>So let's go to <code>resources/view/layouts/app.blade.php</code> and add in our styles + scripts</p>

<p>styles in the head</p>

<pre><code class="language-html">    ...
    &lt;!-- Styles --&gt;
    &lt;link href="{{ asset('css/app.css') }}" rel="stylesheet"&gt;

    //add this line
    &lt;livewire:styles&gt;
&lt;/head&gt;
</code></pre>

<p>scripts just before the end of the body tag</p>

<pre><code class="language-html">        ...
        &lt;main class="py-4"&gt;
            @yield('content')
        &lt;/main&gt;
    &lt;/div&gt;

    //add this line
    &lt;livewire:scripts&gt;
&lt;/body&gt;
</code></pre>

<h3>Create the Livewire Component</h3>

<p>Next up we're going to create the livewire component, and create a route to serve the livewire component.</p>

<pre><code class="language-php">php artisan make:livewire maskedform
</code></pre>

<p>This should have created 2 new files for you.<br />
<code>app/Http/Livewire/MaskedForm.php</code> This is the component code, and <br />
<code>resources/views/livewire/maskedform.blade.php</code> this is the component view.</p>

<p>Let's also create the view <code>livewireform.blade.php</code> in the <code>resources/views</code> folder.  This view will hold our livewire component for us</p>

<pre><code class="language-html">@extends('layouts.app')

@section('content')
&lt;div class="container"&gt;
    &lt;div class="row justify-content-center"&gt;
        &lt;div class="col-md-8"&gt;
            &lt;div class="card"&gt;
                &lt;div class="card-body"&gt;
                    &lt;livewire:maskedform&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
@endsection
</code></pre>

<p>Let's create a route to the livewire component by adding this line into <code>routes/web.php</code></p>

<pre><code class="language-php">Route::get('/maskedform', function() {
    return view ('livewireform');
});
</code></pre>

<p>and finally let's add this code to to our livewire component view</p>

<pre><code class="language-html">&lt;form&gt;
    &lt;div class="form-group row"&gt;
        &lt;label class="col-md-4 col-form-label text-md-right"&gt;Phone&lt;/label&gt;
        &lt;div class="col-md-6"&gt;
            &lt;input type="text" class="form-control" autofocus&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>Now if you browse to the route, (with valet, mine is <code>livewiremask.test/maskedform</code> ) you should see this</p>

<p><img src="/assets/images/livewire-masks-with-manny/phone-view.png"/></p>

<p>Ok - so now we can start defining the different variables we want to play with</p>

<h3>Defining the Livewire Variables</h3>

<p>Let's jump into livewire code, <code>app/Http/Livewire/Maskedform.php</code>.
It should look like this:</p>

<pre><code class="language-php">&lt;?php

namespace App\Http\Livewire;

use Livewire\Component;

class Maskedform extends Component
{
    public function render()
    {
        return view('livewire.maskedform');
    }
}
</code></pre>

<p>The first thing we want to do is bind the phone field we created in the view to a variable in the code.</p>

<pre><code>class Maskedform extends Component
{
    public $phone;

    public function updated($field)
    {
        if ($field == 'phone') {
            //this is where we will detect any changes to the phone field.
        }
    }
    ...
</code></pre>

<p>and in the livewire view, we are going to bind it by adding the <code>wire:model="phone"</code> to the input.</p>

<pre><code class="language-html">&lt;div class="form-group row"&gt;
    &lt;label for="phone" class="col-md-4 col-form-label text-md-right"&gt;Phone&lt;/label&gt;
    &lt;div class="col-md-6"&gt;
        &lt;input wire:model="phone" id="phone" type="text" class="form-control" autofocus&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h3>Pull in Manny - start masking</h3>

<p>now it's time to pull in Manny - (manny is short for manipulator)</p>

<pre><code class="language-sh">composer require hallindavid/manny
</code></pre>

<p>The docs for Manny are available here: <a href="https://github.com/hallindavid/manny">github.com/hallindavid/manny</a> there are quite a few little functions that are super helpful with Livewire.</p>

<p>The first mask we'll play with is, just to eliminate all non-numeric characters.  You can do through using <code>preg_replace</code> with regular expressions, but Manny has a function called <code>Stripper</code> which can also do this for us without the need for remembering how to write regular expressions.</p>

<p>In our <code>app/Http/Livewire/Maskedform.php</code> file, let's update our code</p>

<pre><code class="language-php">use Livewire\Component;
use Manny;

class Maskedform extends Component
{
    public $phone;

    public function updated($field)
    {
        if ($field == 'phone')
        {
            $this-&gt;phone = Manny::stripper($this-&gt;phone, ['num']);
        }
    }


    public function render()
    ...
</code></pre>

<p>Now if you go back to your browser and play with the phone field, you should see this happening:
<img src="/assets/images/livewire-masks-with-manny/manny-stripper-num-mask.gif"/></p>

<p>Well that's great for stripping all the non-numeric characters out, but what if you want to format it in a specific way?  In Canada/US we have 10 digit phone numbers in most places, and usually people don't include the country code on the number.  So you see phone numbers that look like this: <code>(987) 123-4567</code> or <code>987-123-4567</code>.</p>

<p>Let's change the Component code to this:</p>

<pre><code class="language-php">if ($field == 'phone')
{
    $this-&gt;phone = Manny::mask($this-&gt;phone, "(111) 111-1111");
}
</code></pre>

<p>go back to your page, and you should be see this now:
<img src="/assets/images/livewire-masks-with-manny/manny-mask.gif"/></p>

<p>For more advanced phone numbers there is actually a class - <code>Manny\Phone</code> that you can extend to do more advanced phone number support - with extensions and other special formatting.</p>

<p>What about other types of fields?
Another great example of using the Manny::mask function is for canadian postal codes.  Canadian postal codes are 2 groups of 3 characters, each group alternates between alphbetical and numeric, so like this:  A1A 1A1</p>

<p>In the view, let's create a seperate input for the postal code.</p>

<pre><code class="language-html">&lt;form&gt;
    &lt;div class="form-group row"&gt;
        &lt;label class="col-md-4 col-form-label text-md-right"&gt;Phone&lt;/label&gt;
        &lt;div class="col-md-6"&gt;
            &lt;input wire:model="phone" type="text" class="form-control" autofocus&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-group row"&gt;
        &lt;label class="col-md-4 col-form-label text-md-right"&gt;Postal Code&lt;/label&gt;
        &lt;div class="col-md-6"&gt;
            &lt;input wire:model="postal" type="text" class="form-control" autofocus&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>and let's also make the variable in the code</p>

<pre><code class="language-php">public $phone;
    public $postal;

    public function updated($field)
    {
        if ($field == 'postal')
        {
            $this-&gt;postal = strtoupper(Manny::mask($this-&gt;postal, "A1A 1A1"));
        }
        ...
</code></pre>

<p>Go ahead and reload - you should see this now.
<img src="/assets/images/livewire-masks-with-manny/manny-mask-postal.gif"/></p>

<p>The mask function is pretty nifty for doing a lot of different patterns.
some other ones to try would be</p>

<pre><code class="language-php">$this-&gt;birthday = Manny::mask($this-&gt;birthday, "11/11/1111");
$this-&gt;date = Manny::mask($this-&gt;date, "1111-11-11");
$this-&gt;time = Manny::mask($this-&gt;time, "11:11");
</code></pre>

<h3>Note on masking with Livewire</h3>

<p>Livewire is very fast, but due to the fact that is being sent through ajax, processed in PHP then returned in javascript, the default debounce may not be good enough for some masks.  Some tips to deal with this could be:</p>

<p>Increase the debounce</p>

<pre><code class="language-html">&lt;input type="text" wire:model.debounce.500ms="phone"&gt;
</code></pre>

<p>Make the inputs lazy (masks after the user has left the input field)</p>

<pre><code class="language-html">&lt;input type="text" wire:model.lazy="phone"&gt;
</code></pre>

<h3>Source Code</h3>

<p>To view the source code from this example go to the GitHub repo
<a href="https://github.com/hallindavid/livewire-masks-with-manny">hallindavid/livewire-masks-with-manny</a></p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/my-first-open-source-package</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/my-first-open-source-package" />
    <title>My first open source package</title>
    <published>2020-03-29T00:00:00+00:00</published>
    <updated>2020-03-29T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">So the other day I was working with Caleb Porzio&#039;s Livewire package, and I ran into a unique situation - atleast for me.

In my normal php builds, when you fill out a form like this



You would use some javascript library to mask the input on the phone......</summary>
    <content type="html"><![CDATA[
        <p>So the other day I was working with <a href="https://calebporzio.com/">Caleb Porzio</a>'s <a href="https://laravel-livewire.com/">Livewire</a> package, and I ran into a unique situation - atleast for me.</p>

<p>In my normal php builds, when you fill out a form like this</p>

<p><img src="/assets/images/first-open-source-package/sample-form.png" /></p>

<p>You would use some javascript library to mask the input on the phone number field like <a href="https://nosir.github.io/cleave.js/">Cleave</a>.  Then when the user would submit the form, I'd remove all formatting characters with regex</p>

<pre><code>$cleansed_phone = preg_replace('/[^0-9]/', '', $posted_phone);
</code></pre>

<p>and format into the desired format - like E.164 if using it for SMS, or if it was a more CRM-like application, storing it like <code>888-888-8888</code> so that people can easily search for it.</p>

<p>In Livewire though, the data is process in PHP - which is super interesting.  Now - I'm sure that there's probably a way to do this with Javascript on top of Livewire, but Livewire already syncs the values accross and makes it super easy to due PHP functions on the data models and send them back to the page.  So in a way, we use Livewire and PHP to build our markup function.</p>

<p>At first I thought to just make the regex calls within the updated function like this:</p>

<pre><code>public function updated($field)
{
    if ($field == 'phone')
    {
        $newPhone = preg_replace('/[^0-9]/', '', $this-&gt;phone);
        $this-&gt;phone = '(' . substr($newPhone, 0,3) . 
                        . (strlen($newPhone) &gt; 3 ? ') ' . substr($newPhone,3,3) : '')
                        . (strlen($newPhone) &gt; 6 ? '-' . substr($newPhone,6,4) : '');
    }
}
</code></pre>

<p>And make no mistake - that will work, but it's a bit of a pain.  I have all this functionality pre-done for me in jQuery &amp; Vue.js and I'm really liking Livewire so far, so I thought I'd make a package of it.</p>

<p>So - here's the package: <a target="_blank()" href="https://github.com/hallindavid/phonehelper">hallindavid/phonehelper</a>.  installable via composer, and Laravel auto-recognizes the ServiceProvider &amp; Alias so when you're wanting to mask phone inputs (just form Canada / US) for the example above, it looks like this</p>

<pre><code>public function updated($field)
{
    if ($field == 'phone')
    {
        $this-&gt;phone = PhoneHelper::format($this-&gt;phone);
    }
}
</code></pre>

<p>It's also super easy to add your own formats by using a configuration file, but it ships with 10 formats by default - checkout the readme for better examples.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/deploying-a-static-site-to-github-pages</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/deploying-a-static-site-to-github-pages" />
    <title>Deploying a static site to a repo subtree and hosting it for free on github pages</title>
    <published>2020-03-28T00:00:00+00:00</published>
    <updated>2020-03-28T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Well - for anyone interested in free hosting for a static website using a service like github pages - that&#039;s what this post is about.

I mentioned in my First Post that I whipped up this site in about an hour with a Static Site Generator called Jigsaw,......</summary>
    <content type="html"><![CDATA[
        <p>Well - for anyone interested in free hosting for a static website using a service like github pages - that's what this post is about.</p>

<p>I mentioned in my <a href="/blog/first-post">First Post</a> that I whipped up this site in about an hour with a Static Site Generator called Jigsaw, and deployed it to github pages.</p>

<p><a href="https://jigsaw.tighten.co/">Jigsaw</a> comes with fantastic <a href="https://jigsaw.tighten.co/docs/installation/">documentation</a> so is generally pretty easy generate the static files, but there is a bit of a catch when using free git repo static hosting if you want to keep it all in one repository.</p>

<p>In the documentation, they say do this</p>

<pre><code>npm run production
git add build_production &amp;&amp; git commit -m "build for deploy"
git subtree push --prefix build_production origin gh-pages
</code></pre>

<p>This will work the first time.  Then when you go and point your domain to github pages though, github adds a file called <code>CNAME</code> it's contents are super basic, it's just the domain name - you can check it out in my <code>gh-pages</code> <a href="https://github.com/hallindavid/davidhallin/tree/gh-pages">branch for this website</a>.</p>

<p>So then you move along, it's published, but you change something.  When you go to deploy again, your <code>build_production</code> folder get's rebuilt.</p>

<p>Then you run through the same thing again, you add the modified files and then go to run this command again</p>

<pre><code>git subtree push --prefix build_production origin gh-pages
</code></pre>

<p>and it says that your local version of gh-pages is behind the origins - which it is, Github added a file there, so you are behind.</p>

<p>So there is actually a little list of things which need to happen when you're ready to deploy</p>

<ol>
<li>You need build for production again</li>
</ol>

<pre><code class="language-sh">npm run production
</code></pre>

<ol start="2">
<li>You will need to recreate the <code>CNAME</code> record, because that will have been deleted during the build.  You can do that through something like this.</li>
</ol>

<pre><code class="language-sh">echo 'davidhallin.com' &gt; build_production/CNAME
</code></pre>

<p><small class="italic">Obviously replace davidhallin.com with your CNAME value.</small></p>

<ol start="3">
<li>You will want to go through the git process again, but force-override the existing gh-pages version on github.</li>
</ol>

<pre><code class="language-sh"># add build_production to commit
git add build_production
# commit build production
git commit -m "build for production" 
# new local branch for build_production
git subtree split --prefix build_production -b gh-pages
# this will overwrite the github gh-pages with your new local gh-pages
git push -f origin gh-pages:gh-pages
# this will delete the local branch you just wrote
git branch -D gh-pages
</code></pre>

<p>So this is the workflow that allows for easy, no-bologna configuration deployment, and this will work with anything - this is less about static site generation than it is about serving a sub-folder on static hosting.  You could use this same logic to serve content on netlify, or render or aws s3.</p>

<p>So - I made this into an npm script</p>

<pre><code>"scripts": {
    "production": "cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --env=production --config=node_modules/laravel-mix/setup/webpack.config.js",
    "dev": "npm run local",
    "watch": "npm run local -- --watch",
    "deploy": "npm run production &amp;&amp; echo 'davidhallin.com' &gt; build_production/CNAME &amp;&amp; git add build_production &amp;&amp; git commit -m \"build for production\" &amp;&amp; git subtree split --prefix build_production -b gh-pages &amp;&amp; git push -f origin gh-pages:gh-pages &amp;&amp; git branch -D gh-pages"
},
</code></pre>

<p>and then I execute by running <code>npm run deploy</code>
but you could just as easily make a new file like <code>build.sh</code></p>

<pre><code class="language-sh">npm run production
echo 'davidhallin.com' &gt; build_production/CNAME
git add build_production
git commit -m "Build for Production"
git subtree split --prefix build_production -b gh-pages
git push -f origin gh-pages:gh-pages
git branch -D gh-pages
</code></pre>

<p>and then run <code>./build.sh</code> to deploy when ever you want to deploy.</p>

<p>Hope somebody finds this useful!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/sublime-snippets-location</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/sublime-snippets-location" />
    <title>How to use Sublime Text Snippets and improve your workflow</title>
    <published>2020-03-26T00:00:00+00:00</published>
    <updated>2020-03-26T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">If you&#039;ve never played with Sublime Text, it&#039;s a fantastic editor and feels so much faster than most of the other editors out there today.  It does cost some money up front, but there is no monthly/annual subscription that you need.  One of I think it&#039;s......</summary>
    <content type="html"><![CDATA[
        <h2>What is a snippet?</h2>

<p>If you've never played with Sublime Text, it's a fantastic editor and feels so much faster than most of the other editors out there today.  It does cost some money up front, but there is no monthly/annual subscription that you need.  One of I think it's most powerful features is snippets.</p>

<p>When I first started using snippets, the way I understood them was like a multi-copy paste function.  Instead of having just one thing copied at a time, you could have a bunch.  So when there is a repeatable piece of code, you make a snippet and then just pump them out, but the power of snippets in Sublime Text runs deeper than that.  The super-feature is the tabbed selections in a snippet.</p>

<p>Here is an example of a snippet I use all the time when I'm designing forms in Laravel with Bootstrap.</p>

<pre><code>&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[
&lt;div class="form-group row"&gt;
    &lt;label for="${1}" class="col-sm-2 col-form-label"&gt;${2}&lt;/label&gt;
    &lt;div class="col-sm-10"&gt;
        &lt;input  class="form-control @error('${1}') is-valid @else is-invalid @enderror" 
                type="text" 
                id="${1}" name="${1}"
                value="{{ old('${1}') }}"&gt;
        @error('${1}')
        &lt;div class="invalid-feedback"&gt;
            {{ \$message }}
        &lt;/div&gt;
        @enderror
    &lt;/div&gt;
&lt;/div&gt;
]]&gt;&lt;/content&gt;
    &lt;tabTrigger&gt;lbinput&lt;/tabTrigger&gt;
&lt;/snippet&gt;
</code></pre>

<p>So - I'd use my "Laravel Bootstrap Input" snippet - <code>lbinput</code> and automatically, all the fields where there is a <code>${1}</code> are highlighted, meaning I can type that string in just once to fill all of them in.</p>

<p><img src="/assets/images/post-3/lbinput.gif" class="w-full"></p>

<p>This is cool for so many reasons</p>

<ul>
<li>You just wrote over 10 lines of code with 8 keystrokes</li>
<li>Perfect accuracy - because you had the label-for, input id, value, and name, plus the error handling methods all in the same selection, they're all going to be the exact same text.  So feel free to use <code>frist_name</code> - it'll still work! (at least on the front end)</li>
<li>More consistency - If you're looping through many of these input fields, sometimes you can forget classes to apply or neglect error handling on certain fields.</li>
</ul>

<p>Awesome right?</p>

<h2>How do I make the snippets?</h2>

<p>In Sublime all you have to do is go to Tools -> Developer -> New Snippet.</p>

<p>This will open a new snippet template and give you some areas to fill in the blank.</p>

<p>Once you're finished, you have to save it with a <code>.sublime-snippet</code> extension.  Then you should be good to go.</p>

<h2>How do I edit a snippet?</h2>

<p>So if you've just created your first snippet, and saved it properly, and it works, but now you need to edit it, you may be wondering where you actually just saved that file to because it's not in your home directory.</p>

<p>This path for mine are here:</p>

<pre><code>~/Library/Application Support/Sublime Text 3/ Packages/User/snippets/
</code></pre>

<p>It's hard to that folder in finder, so you should use the Sublime CLI tool (see <a href="https://www.sublimetext.com/docs/3/osx_command_line.html">here</a>) so you're able to do something like this</p>

<pre><code>subl ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User
</code></pre>

<p>I do this enough that I made an alias in my .zshrc file</p>

<pre><code>alias sublsnippets="subl ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User"
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/first-post</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/first-post" />
    <title>First Post</title>
    <published>2020-03-25T00:00:00+00:00</published>
    <updated>2020-03-25T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Well - I just used Jigsaw to build this site.  I started at 6:30 AM, and at the time of writing, it&#039;s 7:28 AM on March 25th, 2020.

If you&#039;re already comfortable with Laravel, Jigsaw is by far the easiest static-site generation tool I&#039;ve played with so......</summary>
    <content type="html"><![CDATA[
        <p>Well - I just used Jigsaw to build this site.  I started at 6:30 AM, and at the time of writing, it's 7:28 AM on March 25th, 2020.</p>

<p>If you're already comfortable with Laravel, <a href="https://jigsaw.tighten.co">Jigsaw</a> is by far the easiest static-site generation tool I've played with so far - I've tried a few like Gatsby, and Nuxt, and I think they are awesome, but if you're a PHP dev at heart, Jigsaw is goign to be an easier go for you.</p>

<p>This website (davidhallin.com) is totally open-source.  You can take a look at the repo here <a href="https://github.com/hallindavid/davidhallin" target="_blank()">github.com/hallindavid/davidhallin</a></p>

<p>I pushed this website to GitHub pages - which is free hosting for static websites that are open-source.</p>

<p>For <strong>just 1 hour of work</strong> I think it's pretty decent to have a blog themed, all the basic info added, and pushed to production hosting with SSL.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/bootstrap-vue-form-builder</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/bootstrap-vue-form-builder" />
    <title>BootstrapVueFormBuilder</title>
    <published>2020-03-25T00:00:00+00:00</published>
    <updated>2020-03-25T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Website
     Git Repo


Throughout my career, a huge portion of my regular work comes from creating forms for people.  People always need forms.

The regular progression in my situation is this.


I spend a bunch of time building a form
The customer......</summary>
    <content type="html"><![CDATA[
        <h3>What is BootstrapVueFormBuilder?</h3>

<div class="mx-auto text-center">
    <img src="/assets/images/post-2/quick-scaffold.gif" class="mx-auto my-4"/><br />
    <a href="https://bootstrapvueformbuilder.com" target="_blank" class="py-4 px-6 my-4 bg-gray-900 text-white hover:text-gray-400 text-2xl">Website</a>
    <a href="https://github.com/hallindavid/bootstrapvueformbuilder" target="_blank" class="py-4 my-4 px-6 bg-gray-900 text-white hover:text-gray-400 text-2xl"><i class="fab fa-github"></i> Git Repo</a>
</div>

<p>Throughout my career, a huge portion of my regular work comes from creating forms for people.  People always need forms.</p>

<p>The regular progression in my situation is this.</p>

<ol>
<li>I spend a bunch of time building a form</li>
<li>The customer likes the form, then tries it</li>
<li>The customer asks for changes to the form because they missed a field, or had an extra field they didn't need</li>
<li>Adding / removing those fields doesn't work in the nice grid layout that I built</li>
<li>Build new Grid layout for fields</li>
<li>Ensure responsive</li>
<li>Fix validation because you were being sloppy when rapidly doing the <code>cmd+x</code> + <code>cmd+v</code> all over the place and broke it</li>
</ol>

<iframe class="mx-auto" src="https://giphy.com/embed/GTTxe2PWPftOU" width="480" height="352" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

<p class="text-center"><a href="https://giphy.com/gifs/computer-pics-smash-GTTxe2PWPftOU">via GIPHY</a></p>

<p>The idea behind this open-source project is to make it easy to scaffold out forms with the layout/responsiveness and then you can save them as .json files and can go back and modify them if you need to.</p>

<p><strong>Note</strong> - this is using the <a href="https://bootstrap-vue.js.org/" target="_blank()"> BootstrapVue</a> Package - which basically allows us to do Vue.js validation prior to actually posting the form to the backend/api.</p>

<p>So you scaffold out a basic form using the interface - see the gif above.</p>

<p>Here's a super basic example:
<img src="/assets/images/post-2/simple-form.png" class="mx-auto w-full" /></p>

<p>There's not a lot to this one, but you can preview it in different window sizes, and make sure that when you shrink the page down, it looks like this instead
<img src="/assets/images/post-2/small-simple-form.png" class="mx-auto w-full" /></p>

<p>So you take the code export, add it to your project, give it to the customer, and wait for feedback.
You also save a JSON export of your form</p>

<pre><code>[
    {
        "custom_class":"",
        "items":[
            {
                "id":1585137446098,
                "show_editor":true,
                "label":"First Name",
                "label_class":"",
                "scaffold_validation":false,
                "valid_feedback":"",
                "invalid_feedback":"Please enter a first name",
                "custom_model":false,
                "model":"first_name",
                "is_switch":false,
                "type":"input-text",
                "description":"",
                "placeholder":"",
                "min":"",
                "max":"",
                "num_rows":"",
                "max_rows":"",
                "size":"md",
                "step":"",
                "cols":"12",
                "cols_sm":"",
                "cols_md":"6",
                "cols_lg":""
                ,"cols_xl":"",
                "label_cols":"3",
                "label_cols_sm":"",
                "label_cols_md":"",
                "label_cols_lg":"",
                "label_cols_xl":"",
                "label_align":"center",
                "label_align_sm":"",
                "label_align_md":"",
                "label_align_lg":"",
                "label_align_xl":"",
                "select_options":[]
            },
            {
                "id":1585137487177,
                "show_editor":false,
                "label":"Last Name",
                "label_class":"",
                "scaffold_validation":false,
                "valid_feedback":"",
                "invalid_feedback":"Please enter a last name",
                "custom_model":false,
                "model":"last_name",
                "is_switch":false,
                "type":"input-text",
                "description":"",
                "placeholder":"",
                "min":"",
                "max":"",
                "num_rows":"",
                "max_rows":"",
                "size":"md",
                "step":"",
                "cols":"12",
                "cols_sm":"",
                "cols_md":"6",
                "cols_lg":"",
                "cols_xl":"",
                "label_cols":"3",
                "label_cols_sm":"",
                "label_cols_md":"",
                "label_cols_lg":"",
                "label_cols_xl":"",
                "label_align":"center",
                "label_align_sm":"",
                "label_align_md":"",
                "label_align_lg":"",
                "label_align_xl":"",
                "select_options":[]
            }
        ]
    }
]
</code></pre>

<p>It's just got the basic info about your fields, so when the customer comes back, you take that JSON file, re-import it into the BootstrapVueFormBuilder and you can do things like</p>

<ul>
<li>click-and-drag the fields around to re-organize them</li>
<li>resize with instant-preview</li>
<li>make sure the adjusted form is still responsive etc.</li>
</ul>

<p>And when you're doing a form with this tool, it will automatically add the basic vuejs data-bindings for your fields, which often times can be a pain</p>

<p>Anyways, Hope you guys like it!</p>

<p>If you want to try it out, feel free to copy/paste the JSON code above, and go to <a href="https://bootstrapvueformbuilder.com" target="_blank()">bootstrapvueformbuilder.com</a> and import it.</p>
    ]]></content>
</entry>
    </feed>
