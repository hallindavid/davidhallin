<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>David Hallin</title>
    <link href="https://davidhallin.com/" />
    <link type="application/atom+xml" rel="self" href="https://davidhallin.com/blog/feed.atom" />
    <updated>2020-03-29T22:24:04+00:00</updated>
    <id>https://davidhallin.com/blog/feed.atom</id>
    <author>
        <name>David Hallin</name>
    </author>
                <entry>
    <id>https://davidhallin.com/blog/deploying-a-static-site-to-github-pages</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/deploying-a-static-site-to-github-pages" />
    <title>Deploying a static site to a repo subtree and hosting it for free on github pages</title>
    <published>2020-03-29T00:00:00+00:00</published>
    <updated>2020-03-29T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Well - for anyone interested in free hosting for a static website using a service like github pages - that&#039;s what this post is about.

I mentioned in my First Post that I whipped up this site in about an hour with a Static Site Generator called Jigsaw,......</summary>
    <content type="html"><![CDATA[
        <p>Well - for anyone interested in free hosting for a static website using a service like github pages - that's what this post is about.</p>

<p>I mentioned in my <a href="/blog/first-post">First Post</a> that I whipped up this site in about an hour with a Static Site Generator called Jigsaw, and deployed it to github pages.</p>

<p><a href="https://jigsaw.tighten.co/">Jigsaw</a> comes with fantastic <a href="https://jigsaw.tighten.co/docs/installation/">documentation</a> so is generally pretty easy generate the static files, but there is a bit of a catch when using free git repo static hosting if you want to keep it all in one repository.</p>

<p>In the documentation, they say do this</p>

<pre><code>npm run production
git add build_production &amp;&amp; git commit -m "build for deploy"
git subtree push --prefix build_production origin gh-pages
</code></pre>

<p>This will work the first time.  Then when you go and point your domain to github pages though, github adds a file called <code>CNAME</code> it's contents are super basic, it's just the domain name - you can check it out in my <code>gh-pages</code> <a href="https://github.com/hallindavid/davidhallin/tree/gh-pages">branch for this website</a>.</p>

<p>So then you move along, it's published, but you change something.  When you go to deploy again, your <code>build_production</code> folder get's rebuilt.</p>

<p>Then you run through the same thing again, you add the modified files and then go to run this command again</p>

<pre><code>git subtree push --prefix build_production origin gh-pages
</code></pre>

<p>and it says that your local version of gh-pages is behind the origins - which it is, Github added a file there, so you are behind.</p>

<p>So there is actually a little list of things which need to happen when you're ready to deploy</p>

<ol>
<li>You need build for production again</li>
</ol>

<pre><code class="language-sh">npm run production
</code></pre>

<ol start="2">
<li>You will need to recreate the <code>CNAME</code> record, because that will have been deleted during the build.  You can do that through something like this.</li>
</ol>

<pre><code class="language-sh">echo 'davidhallin.com' &gt; build_production/CNAME
</code></pre>

<p><small class="italic">Obviously replace davidhallin.com with your CNAME value.</small></p>

<ol start="3">
<li>You will want to go through the git process again, but force-override the existing gh-pages version on github.</li>
</ol>

<pre><code class="language-sh"># add build_production to commit
git add build_production
# commit build production
git commit -m "build for production" 
# new local branch for build_production
git subtree split --prefix build_production -b gh-pages
# this will overwrite the github gh-pages with your new local gh-pages
git push -f origin gh-pages:gh-pages
# this will delete the local branch you just wrote
git branch -D gh-pages
</code></pre>

<p>So this is the workflow that allows for easy, no-bologna configuration deployment, and this will work with anything - this is less about static site generation than it is about serving a sub-folder on static hosting.  You could use this same logic to serve content on netlify, or render or aws s3.</p>

<p>So - I made this into an npm script</p>

<pre><code>"scripts": {
    "production": "cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --env=production --config=node_modules/laravel-mix/setup/webpack.config.js",
    "dev": "npm run local",
    "watch": "npm run local -- --watch",
    "deploy": "npm run production &amp;&amp; echo 'davidhallin.com' &gt; build_production/CNAME &amp;&amp; git add build_production &amp;&amp; git commit -m \"build for production\" &amp;&amp; git subtree split --prefix build_production -b gh-pages &amp;&amp; git push -f origin gh-pages:gh-pages &amp;&amp; git branch -D gh-pages"
},
</code></pre>

<p>and then I execute by running <code>npm run deploy</code>
but you could just as easily make a new file like <code>build.sh</code></p>

<pre><code class="language-sh">npm run production
echo 'davidhallin.com' &gt; build_production/CNAME
git add build_production
git commit -m "Build for Production"
git subtree split --prefix build_production -b gh-pages
git push -f origin gh-pages:gh-pages
git branch -D gh-pages
</code></pre>

<p>and then run <code>./build.sh</code> to deploy when ever you want to deploy.</p>

<p>Hope somebody finds this useful!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/sublime-snippets-location</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/sublime-snippets-location" />
    <title>How to use Sublime Text Snippets and improve your workflow</title>
    <published>2020-03-26T00:00:00+00:00</published>
    <updated>2020-03-26T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">If you&#039;ve never played with Sublime Text, it&#039;s a fantastic editor and feels so much faster than most of the other editors out there today.  It does cost some money up front, but there is no monthly/annual subscription that you need.  One of I think it&#039;s......</summary>
    <content type="html"><![CDATA[
        <h2>What is a snippet?</h2>

<p>If you've never played with Sublime Text, it's a fantastic editor and feels so much faster than most of the other editors out there today.  It does cost some money up front, but there is no monthly/annual subscription that you need.  One of I think it's most powerful features is snippets.</p>

<p>When I first started using snippets, the way I understood them was like a multi-copy paste function.  Instead of having just one thing copied at a time, you could have a bunch.  So when there is a repeatable piece of code, you make a snippet and then just pump them out, but the power of snippets in Sublime Text runs deeper than that.  The super-feature is the tabbed selections in a snippet.</p>

<p>Here is an example of a snippet I use all the time when I'm designing forms in Laravel with Bootstrap.</p>

<pre><code>&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[
&lt;div class="form-group row"&gt;
    &lt;label for="${1}" class="col-sm-2 col-form-label"&gt;${2}&lt;/label&gt;
    &lt;div class="col-sm-10"&gt;
        &lt;input  class="form-control @error('${1}') is-valid @else is-invalid @enderror" 
                type="text" 
                id="${1}" name="${1}"
                value="{{ old('${1}') }}"&gt;
        @error('${1}')
        &lt;div class="invalid-feedback"&gt;
            {{ \$message }}
        &lt;/div&gt;
        @enderror
    &lt;/div&gt;
&lt;/div&gt;
]]&gt;&lt;/content&gt;
    &lt;tabTrigger&gt;lbinput&lt;/tabTrigger&gt;
&lt;/snippet&gt;
</code></pre>

<p>So - I'd use my "Laravel Bootstrap Input" snippet - <code>lbinput</code> and automatically, all the fields where there is a <code>${1}</code> are highlighted, meaning I can type that string in just once to fill all of them in.</p>

<p><img src="/assets/images/post-3/lbinput.gif" class="w-full"></p>

<p>This is cool for so many reasons</p>

<ul>
<li>You just wrote over 10 lines of code with 8 keystrokes</li>
<li>Perfect accuracy - because you had the label-for, input id, value, and name, plus the error handling methods all in the same selection, they're all going to be the exact same text.  So feel free to use <code>frist_name</code> - it'll still work! (at least on the front end)</li>
<li>More consistency - If you're looping through many of these input fields, sometimes you can forget classes to apply or neglect error handling on certain fields.</li>
</ul>

<p>Awesome right?</p>

<h2>How do I make the snippets?</h2>

<p>In Sublime all you have to do is go to Tools -> Developer -> New Snippet.</p>

<p>This will open a new snippet template and give you some areas to fill in the blank.</p>

<p>Once you're finished, you have to save it with a <code>.sublime-snippet</code> extension.  Then you should be good to go.</p>

<h2>How do I edit a snippet?</h2>

<p>So if you've just created your first snippet, and saved it properly, and it works, but now you need to edit it, you may be wondering where you actually just saved that file to because it's not in your home directory.</p>

<p>This path for mine are here:</p>

<pre><code>~/Library/Application Support/Sublime Text 3/ Packages/User/snippets/
</code></pre>

<p>It's hard to that folder in finder, so you should use the Sublime CLI tool (see <a href="https://www.sublimetext.com/docs/3/osx_command_line.html">here</a>) so you're able to do something like this</p>

<pre><code>subl ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User
</code></pre>

<p>I do this enough that I made an alias in my .zshrc file</p>

<pre><code>alias sublsnippets="subl ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User"
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/first-post</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/first-post" />
    <title>First Post</title>
    <published>2020-03-25T00:00:00+00:00</published>
    <updated>2020-03-25T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Well - I just used Jigsaw to build this site.  I started at 6:30 AM, and at the time of writing, it&#039;s 7:28 AM on March 25th, 2020.

If you&#039;re already comfortable with Laravel, Jigsaw is by far the easiest static-site generation tool I&#039;ve played with so......</summary>
    <content type="html"><![CDATA[
        <p>Well - I just used Jigsaw to build this site.  I started at 6:30 AM, and at the time of writing, it's 7:28 AM on March 25th, 2020.</p>

<p>If you're already comfortable with Laravel, <a href="https://jigsaw.tighten.co">Jigsaw</a> is by far the easiest static-site generation tool I've played with so far - I've tried a few like Gatsby, and Nuxt, and I think they are awesome, but if you're a PHP dev at heart, Jigsaw is goign to be an easier go for you.</p>

<p>This website (davidhallin.com) is totally open-source.  You can take a look at the repo here <a href="https://github.com/hallindavid/davidhallin" target="_blank()">github.com/hallindavid/davidhallin</a></p>

<p>I pushed this website to GitHub pages - which is free hosting for static websites that are open-source.</p>

<p>For <strong>just 1 hour of work</strong> I think it's pretty decent to have a blog themed, all the basic info added, and pushed to production hosting with SSL.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://davidhallin.com/blog/bootstrap-vue-form-builder</id>
    <link type="text/html" rel="alternate" href="https://davidhallin.com/blog/bootstrap-vue-form-builder" />
    <title>BootstrapVueFormBuilder</title>
    <published>2020-03-25T00:00:00+00:00</published>
    <updated>2020-03-25T00:00:00+00:00</updated>
    <author>
        <name>Dave</name>
    </author>
    <summary type="html">Website
     Git Repo


Throughout my career, a huge portion of my regular work comes from creating forms for people.  People always need forms.

The regular progression in my situation is this.


I spend a bunch of time building a form
The customer......</summary>
    <content type="html"><![CDATA[
        <h3>What is BootstrapVueFormBuilder?</h3>

<div class="mx-auto text-center">
    <img src="/assets/images/post-2/quick-scaffold.gif" class="mx-auto my-4"/><br />
    <a href="https://bootstrapvueformbuilder.com" target="_blank" class="py-4 px-6 my-4 bg-gray-900 text-white hover:text-gray-400 text-2xl">Website</a>
    <a href="https://github.com/hallindavid/bootstrapvueformbuilder" target="_blank" class="py-4 my-4 px-6 bg-gray-900 text-white hover:text-gray-400 text-2xl"><i class="fab fa-github"></i> Git Repo</a>
</div>

<p>Throughout my career, a huge portion of my regular work comes from creating forms for people.  People always need forms.</p>

<p>The regular progression in my situation is this.</p>

<ol>
<li>I spend a bunch of time building a form</li>
<li>The customer likes the form, then tries it</li>
<li>The customer asks for changes to the form because they missed a field, or had an extra field they didn't need</li>
<li>Adding / removing those fields doesn't work in the nice grid layout that I built</li>
<li>Build new Grid layout for fields</li>
<li>Ensure responsive</li>
<li>Fix validation because you were being sloppy when rapidly doing the <code>cmd+x</code> + <code>cmd+v</code> all over the place and broke it</li>
</ol>

<iframe class="mx-auto" src="https://giphy.com/embed/GTTxe2PWPftOU" width="480" height="352" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

<p class="text-center"><a href="https://giphy.com/gifs/computer-pics-smash-GTTxe2PWPftOU">via GIPHY</a></p>

<p>The idea behind this open-source project is to make it easy to scaffold out forms with the layout/responsiveness and then you can save them as .json files and can go back and modify them if you need to.</p>

<p><strong>Note</strong> - this is using the <a href="https://bootstrap-vue.js.org/" target="_blank()"> BootstrapVue</a> Package - which basically allows us to do Vue.js validation prior to actually posting the form to the backend/api.</p>

<p>So you scaffold out a basic form using the interface - see the gif above.</p>

<p>Here's a super basic example:
<img src="/assets/images/post-2/simple-form.png" class="mx-auto w-full" /></p>

<p>There's not a lot to this one, but you can preview it in different window sizes, and make sure that when you shrink the page down, it looks like this instead
<img src="/assets/images/post-2/small-simple-form.png" class="mx-auto w-full" /></p>

<p>So you take the code export, add it to your project, give it to the customer, and wait for feedback.
You also save a JSON export of your form</p>

<pre><code>[
    {
        "custom_class":"",
        "items":[
            {
                "id":1585137446098,
                "show_editor":true,
                "label":"First Name",
                "label_class":"",
                "scaffold_validation":false,
                "valid_feedback":"",
                "invalid_feedback":"Please enter a first name",
                "custom_model":false,
                "model":"first_name",
                "is_switch":false,
                "type":"input-text",
                "description":"",
                "placeholder":"",
                "min":"",
                "max":"",
                "num_rows":"",
                "max_rows":"",
                "size":"md",
                "step":"",
                "cols":"12",
                "cols_sm":"",
                "cols_md":"6",
                "cols_lg":""
                ,"cols_xl":"",
                "label_cols":"3",
                "label_cols_sm":"",
                "label_cols_md":"",
                "label_cols_lg":"",
                "label_cols_xl":"",
                "label_align":"center",
                "label_align_sm":"",
                "label_align_md":"",
                "label_align_lg":"",
                "label_align_xl":"",
                "select_options":[]
            },
            {
                "id":1585137487177,
                "show_editor":false,
                "label":"Last Name",
                "label_class":"",
                "scaffold_validation":false,
                "valid_feedback":"",
                "invalid_feedback":"Please enter a last name",
                "custom_model":false,
                "model":"last_name",
                "is_switch":false,
                "type":"input-text",
                "description":"",
                "placeholder":"",
                "min":"",
                "max":"",
                "num_rows":"",
                "max_rows":"",
                "size":"md",
                "step":"",
                "cols":"12",
                "cols_sm":"",
                "cols_md":"6",
                "cols_lg":"",
                "cols_xl":"",
                "label_cols":"3",
                "label_cols_sm":"",
                "label_cols_md":"",
                "label_cols_lg":"",
                "label_cols_xl":"",
                "label_align":"center",
                "label_align_sm":"",
                "label_align_md":"",
                "label_align_lg":"",
                "label_align_xl":"",
                "select_options":[]
            }
        ]
    }
]
</code></pre>

<p>It's just got the basic info about your fields, so when the customer comes back, you take that JSON file, re-import it into the BootstrapVueFormBuilder and you can do things like</p>

<ul>
<li>click-and-drag the fields around to re-organize them</li>
<li>resize with instant-preview</li>
<li>make sure the adjusted form is still responsive etc.</li>
</ul>

<p>And when you're doing a form with this tool, it will automatically add the basic vuejs data-bindings for your fields, which often times can be a pain</p>

<p>Anyways, Hope you guys like it!</p>

<p>If you want to try it out, feel free to copy/paste the JSON code above, and go to <a href="https://bootstrapvueformbuilder.com" target="_blank()">bootstrapvueformbuilder.com</a> and import it.</p>
    ]]></content>
</entry>
    </feed>
